-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module User where

import DA.Optional (isNone, isSome)

import Follows
import Token

import Daml.Script

template User with
    username: Party
  where
    signatory username

    key username: Party
    maintainer key

    nonconsuming choice RequestToFollow: ContractId FollowRequest with
        userToFollow: Party
      controller username
      do
        let
          follows = Follows with
            follower = username
            followee = userToFollow

        assertMsg "You cannot follow yourself"
          $ userToFollow /= username

        assertMsg ("You already follow " <> partyToText userToFollow )
          . isNone =<< lookupByKey @Follows follows

        assertMsg ("You already requested to follow " <> partyToText userToFollow )
          . isNone =<< lookupByKey @FollowRequest follows

        create FollowRequest with follows

    nonconsuming choice MintToken: ContractId Token with
        tokenId: Text
        title: Text
        content: Text
        description: Text
      controller username
      do
        createUserPrivateIfMissing username
        (_, UserPrivate { followers }) <- fetchByKey @UserPrivate username
        authoredOn <- getTime
        let
          token = Token with
            author = username
            authoredOn
            id = tokenId
            owner = username
            ownerSince = authoredOn
            title
            content
            description
            audience = followers
            ownerHistory = [(username, authoredOn)]
        cToken <- create token
        exerciseByKey @UserPrivate username UserPrivate_AddToken with
          newTokenKey = key token
        pure cToken

script : Script ()
script = do
  -- Allocate parties Alice, Bob, Chuck and Dana
  alice <- allocateParty "Alice"
  aliceUser <- submit alice $ createCmd User with username = alice

  bob <- allocateParty "Bob"
  bobUser <- submit bob $ createCmd User with username = bob

  chuck <- allocateParty "Chuck"
  chuckUser <- submit chuck $ createCmd User with username = chuck

  dana <- allocateParty "Dana"
  danaUser <- submit dana $ createCmd User with username = dana

  -- Alice and Bob follow each other
  request <- submit bob $ exerciseCmd bobUser RequestToFollow with
    userToFollow = alice

  bobFollowsAlice <- submit alice $ exerciseCmd request AcceptFollowRequest

  request2 <- submit alice $ exerciseCmd aliceUser RequestToFollow with
    userToFollow = bob

  aliceFollowsBob <- submit bob $ exerciseCmd request2 AcceptFollowRequest

  -- Chuck requests to follow Alice, but she declines
  request3 <- submit chuck $ exerciseCmd chuckUser RequestToFollow with
    userToFollow = alice

  submit alice $ exerciseCmd request3 DeclineFollowRequest

  -- Alice mints a token
  token1ContractId <- submit alice $ exerciseCmd aliceUser MintToken with
    tokenId = "tid"
    title = "my first token"
    content = "http://example.org/cat.png"
    description = "lorem ipsum"

  Some token1Key <- fmap key <$>
    queryContractId @Token alice token1ContractId

  -- Bob can see Alice's token
  assertMsg "Bob should be able to see Alice's token" . isSome =<<
    queryContractKey @Token bob token1Key

  -- Alice removes Bob from her followers
  submit alice $ exerciseCmd bobFollowsAlice RemoveFollower

  -- Bob can no longer see Alice's token
  assertMsg "Bob should not be able to see Alice's token" . isNone =<<
    queryContractKey @Token bob token1Key

  -- Chuck requests to follow Bob, but Chuck withdraws his request before Bob accepts it
  request4 <- submit chuck $ exerciseCmd chuckUser RequestToFollow with
    userToFollow = bob

  submit chuck $ exerciseCmd request4 WithdrawFollowRequest

  -- Alice unfollows Bob
  submit alice $ exerciseCmd aliceFollowsBob Unfollow

  -- Chuck cannot see Alice's token
  assertMsg "Chuck should not be able to see Alice's token" . isNone =<<
    queryContractKey @Token chuck token1Key

  -- Chuck follows Alice
  request5 <- submit chuck $ exerciseCmd chuckUser RequestToFollow with
    userToFollow = alice

  chuckFollowsAlice <- submit alice $ exerciseCmd request5 AcceptFollowRequest

  -- Chuck can now see Alice's token
  assertMsg "Chuck should be able to see Alice's token" . isSome =<<
    queryContractKey @Token chuck token1Key

  -- Alice destroys her token
  submit alice $ exerciseByKeyCmd @Token token1Key Token_Destroy

  -- Alice cannot see her destroyed token
  assertMsg "Alice should not be able to see her destroyed token" . isNone =<<
    queryContractKey @Token alice token1Key

  -- Dana follows Alice
  -- -- This checks that Alice's UserPrivate contract is in a consistent state.
  request6 <- submit dana $ exerciseCmd danaUser RequestToFollow with
    userToFollow = alice

  danaFollowsAlice <- submit alice $ exerciseCmd request6 AcceptFollowRequest

  pure ()
